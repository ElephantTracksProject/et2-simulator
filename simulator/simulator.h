#ifndef ET2_SIMULATOR_SIMULATOR_SIMULATOR_H_
#define ET2_SIMULATOR_SIMULATOR_SIMULATOR_H_

#include <iostream>
#include <fstream>
#include "simulator/cctree.h"

// Heap simulator from traces generated by Elephant Tracks
//
// Event traces:
// * A: Object allocation
// * U: Object update
// * M: Method entry
// * E: Method exit
// * W: Object witness
//
namespace et_simulator {
class Simulator
{
 private:
  // Context tree
  CCTree * tree_;

  // Name of the files
  std::string trace_file_;
  std::string name_file_;

  // --------------
  // Helper methods
  // --------------

  // Handles input
  void ReadNameFile();
  void ReadTraceFile();

  // Handles output
  void Report();

  // Parses and validates trace events
  bool ParseObjectAllocation(std::vector<std::string> trace);
  bool ParseObjectUpdate(std::vector<std::string> trace);
  bool ParseMethodEntry(std::vector<std::string> trace);
  bool ParseMethodExit(std::vector<std::string> trace);

 public:
  Simulator(std::string tf, std::string nf) :
  trace_file_(tf),
  name_file_(nf) {
    tree_ = new CCTree();
  }

  // Executes an individual trace event
  bool Execute(std::string line);
  // Simulates the entire heap from a traces file
  void Simulate();

  std::string get_trace_file() const { return trace_file_; }
  std::string get_name_file() const { return name_file_; }

  void set_trace_file(std::string tf) { trace_file_ = tf; }
  void set_name_file(std::string nf) { name_file_ = nf; }

};
}  //  namespace et_simulator
#endif  //  ET2_SIMULATOR_SIMULATOR_SIMULATOR_H_
