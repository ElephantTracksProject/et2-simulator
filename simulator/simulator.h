#ifndef SIMULATOR_H__
#define SIMULATOR_H__

#include <iostream>
#include <fstream>
#include "cctree.h"

// Heap simulator from traces generated by Elephant Tracks
//
// Event traces:
// * A: Object allocation
// * U: Object update
// * M: Method entry
// * E: Method exit
// * W: Object witness
//
class Simulator
{
 private:
  // Context tree
  CCTree * tree;

  // Name of the files
  std::string tracefile;
  std::string namesfile;

  // Simulation values
  char kind;
  std::string type;
  int object_id;
  int method_id;
  int size;
  int thread_id;
  int old_target;
  int new_target;
  int root_id;

  // Values measured from simulation
  std::vector<int> allocated_sizes;

  // --------------
  // Helper methods
  // --------------

  // Handles input
  void read_name_file();
  void read_trace_file();

  // Handles output
  void report();

  // Parses and validates trace events
  bool parse_object_allocation(std::vector<std::string> trace);
  bool parse_object_update(std::vector<std::string> trace);
  bool parse_method(std::vector<std::string> trace);

  // Executes trace event
  bool execute(std::string line);

 public:
  Simulator(std::string tf, std::string nf) :
  tracefile(tf),
  namesfile(nf) {
    tree = new CCTree();
  }

  void simulate();


};

#endif
